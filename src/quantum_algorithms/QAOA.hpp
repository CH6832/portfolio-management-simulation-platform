#pragma once

#ifndef QAOA_H
#define QAOA_H

#include <vector>
#include <boost/math/constants/constants.hpp> // Boost for constants

/**
 * @class QAOA
 * @brief A class to implement the Quantum Approximate Optimization Algorithm (QAOA).
 * 
 * This class implements the **Quantum Approximate Optimization Algorithm (QAOA)**, a hybrid quantum-classical algorithm for solving combinatorial optimization problems.
 * QAOA utilizes a quantum circuit parameterized by a set of angles (gamma and beta), and it optimizes these parameters to find a solution to the problem that is approximately the best solution.
 * It is particularly useful for problems like **Max-Cut**, **Max-2-SAT**, and other combinatorial problems that can be formulated as optimization tasks.
 * 
 * QAOA operates in a two-step process involving the application of two sets of operations (a mixing and a problem Hamiltonian) using the parameters gamma and beta, iteratively optimizing them to converge toward a good solution.
 */
class QAOA {
public:
    /**
     * @brief Constructor for the QAOA class.
     * 
     * Initializes the QAOA object with the number of qubits (binary variables) and the number of steps.
     * The number of steps defines the depth of the quantum circuit (how many layers of operations will be applied).
     * 
     * @param num_qubits The number of qubits used in the quantum circuit, which corresponds to the number of binary variables in the problem.
     * @param steps The number of steps (layers of operations) in the QAOA algorithm. Each step adds one layer of quantum operations to the circuit.
     */
    QAOA(int num_qubits, int steps);

    /**
     * @brief Sets the parameters (gamma and beta) for the QAOA algorithm.
     * 
     * The QAOA algorithm uses two sets of parameters: **gamma** and **beta**. These parameters control the mixing and the problem Hamiltonian operations applied in each step of the quantum circuit.
     * 
     * @param gamma A vector of parameters for the problem Hamiltonian part of the quantum circuit.
     * @param beta A vector of parameters for the mixing Hamiltonian part of the quantum circuit.
     */
    void setParameters(const std::vector<double>& gamma, const std::vector<double>& beta);

    /**
     * @brief Optimizes the quantum circuit for a given problem instance.
     * 
     * The **optimize** function iteratively adjusts the parameters **gamma** and **beta** to minimize the objective function associated with the problem.
     * It typically uses classical optimization techniques to find the optimal parameters that produce the best solution (e.g., using methods like gradient descent or other optimization algorithms).
     * 
     * @param problem_instance A vector of problem-specific data that defines the instance of the optimization problem to be solved.
     * @return The best result obtained after optimizing the quantum circuit.
     */
    double optimize(const std::vector<double>& problem_instance);

private:
    int num_qubits;           ///< The number of qubits (binary variables) used in the quantum circuit.
    int steps;                ///< The number of steps (layers) in the quantum circuit, controlling the depth of QAOA.
    std::vector<double> gamma; ///< A vector of gamma parameters, used to control the problem Hamiltonian.
    std::vector<double> beta;  ///< A vector of beta parameters, used to control the mixing Hamiltonian.

    /**
     * @brief Computes the objective function for a given solution.
     * 
     * The objective function measures how well a particular solution (binary string) satisfies the optimization problem. 
     * In the case of QAOA, it is typically the energy associated with a given state or solution as represented by the quantum circuit.
     * 
     * @param solution A binary vector representing a possible solution to the optimization problem.
     * @return The computed objective value (typically the energy or cost associated with the solution).
     */
    double computeObjective(const std::vector<int>& solution);

    /**
     * @brief Runs the quantum circuit to generate a solution.
     * 
     * The **runQuantumCircuit** method simulates the execution of the quantum circuit, producing a solution based on the current parameters.
     * It applies the quantum gates parameterized by gamma and beta to the qubits, ultimately producing a state that represents a possible solution to the optimization problem.
     * 
     * @return A binary vector representing the solution generated by the quantum circuit.
     */
    std::vector<int> runQuantumCircuit();
};

#endif // QAOA_H
